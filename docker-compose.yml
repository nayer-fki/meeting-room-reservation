version: '3.8'
services:
  user-service:
    image: meeting-room-reservation-user-service
    build: ./user-service
    ports:
      - "8001:8001"
    env_file:
      - ./user-service/.env
    environment:
      - DATABASE_URL=postgresql://meeting_user:12345@postgres:5432/meeting_room_db
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - JWT_SECRET=a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0
      - SESSION_SECRET_KEY=a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
      - OAUTH_REDIRECT_URI=http://localhost:8080/api/auth
      - FRONTEND_REDIRECT_URL=http://localhost:3000/
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8001"]
    networks:
      - app-network

  salle-service:
    image: meeting-room-reservation-salle-service
    build: ./salle-service
    ports:
      - "8002:8002"
    env_file:
      - ./salle-service/.env
    environment:
      - DATABASE_URL=postgresql://meeting_user:12345@postgres:5432/meeting_room_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - JWT_SECRET=a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8002"]
    networks:
      - app-network

  reservation-service:
    image: meeting-room-reservation-reservation-service
    build: ./reservation-service
    ports:
      - "8003:8003"
    env_file:
      - ./reservation-service/.env
    environment:
      - DATABASE_URL=postgresql://meeting_user:12345@postgres:5432/meeting_room_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - JWT_SECRET=a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      salle-service:
        condition: service_started
    restart: unless-stopped
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8003"]
    networks:
      - app-network

  api-gateway:
    image: meeting-room-reservation-api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - USER_SERVICE_URL=http://user-service:8001
      - SALLE_SERVICE_URL=http://salle-service:8002
      - RESERVATION_SERVICE_URL=http://reservation-service:8003
      - JWT_SECRET=a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0
      - HEALTH_CHECK_TIMEOUT=5
      - CORS_ALLOWED_ORIGINS=http://localhost:3000
    depends_on:
      user-service:
        condition: service_started  # Reverted to service_started
      salle-service:
        condition: service_started  # Reverted to service_started
      reservation-service:
        condition: service_started  # Reverted to service_started
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    image: meeting-room-reservation-frontend
    build: ./frontend
    ports:
      - "3000:80"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro # Mount the custom nginx.conf
    depends_on:
      - api-gateway
    networks:
      - app-network
  postgres:
    image: postgres:13
    environment:
      - POSTGRES_DB=meeting_room_db
      - POSTGRES_USER=meeting_user
      - POSTGRES_PASSWORD=12345
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U meeting_user -d meeting_room_db"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network

  zookeeper:
    image: bitnami/zookeeper:3.9
    user: "1001"  # Added to fix potential volume permission issues
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    healthcheck:
      test: ["CMD", "/opt/bitnami/zookeeper/bin/zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 90s  # Increased to give Zookeeper more time to start
    restart: unless-stopped
    networks:
      - app-network

  kafka:
    image: bitnami/kafka:3.7
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=1
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1  # Added to ensure offsets topic can be created with replication factor 1
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 120s  # Increased to give Kafka more time to start
    command: ["sh", "-c", "sleep 30 && /opt/bitnami/scripts/kafka/entrypoint.sh /opt/bitnami/scripts/kafka/run.sh"]  # Added delay for Kafka startup
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  zookeeper_data:
  kafka_data: