# Postgres Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:13
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "meeting_room_db"
        - name: POSTGRES_USER
          value: "meeting_user"
        - name: POSTGRES_PASSWORD
          value: "12345"
        livenessProbe:
          exec:
            command: ["pg_isready", "-U", "meeting_user", "-d", "meeting_room_db"]
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 5

---
# Zookeeper Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  labels:
    app: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: bitnami/zookeeper:3.9
        securityContext:
          runAsUser: 1001
        ports:
        - containerPort: 2181
        env:
        - name: ALLOW_ANONYMOUS_LOGIN
          value: "yes"
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        livenessProbe:
          exec:
            command: ["/opt/bitnami/zookeeper/bin/zkServer.sh", "status"]
          initialDelaySeconds: 90
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5

---
# Kafka Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  labels:
    app: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: bitnami/kafka:3.7
        ports:
        - containerPort: 9092
        env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_CFG_ZOOKEEPER_CONNECT
          value: "zookeeper:2181"
        - name: KAFKA_CFG_LISTENERS
          value: "PLAINTEXT://:9092"
        - name: KAFKA_CFG_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka:9092"
        - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT"
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
        - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        - name: KAFKA_CFG_NUM_PARTITIONS
          value: "1"
        - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        command: ["sh", "-c", "sleep 30 && /opt/bitnami/scripts/kafka/entrypoint.sh /opt/bitnami/scripts/kafka/run.sh"]
        livenessProbe:
          exec:
            command: ["kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 5

---
# user-service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  labels:
    app: user-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      containers:
      - name: user-service
        image: nayer564/meeting-room-reservation-user-service:latest
        ports:
        - containerPort: 8001
        env:
        - name: DATABASE_URL
          value: "postgresql://meeting_user:12345@postgres:5432/meeting_room_db"
        - name: GOOGLE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: GOOGLE_CLIENT_ID
        - name: GOOGLE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: GOOGLE_CLIENT_SECRET
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka:9092"
        - name: JWT_SECRET
          value: "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0"
        - name: SESSION_SECRET_KEY
          value: "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6"
        - name: OAUTH_REDIRECT_URI
          value: "http://localhost:8080/api/auth"
        - name: FRONTEND_REDIRECT_URL
          value: "http://localhost:3000/"
        command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8001"]

---
# salle-service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: salle-service
  labels:
    app: salle-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: salle-service
  template:
    metadata:
      labels:
        app: salle-service
    spec:
      containers:
      - name: salle-service
        image: nayer564/meeting-room-reservation-salle-service:latest
        ports:
        - containerPort: 8002
        env:
        - name: DATABASE_URL
          value: "postgresql://meeting_user:12345@postgres:5432/meeting_room_db"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka:9092"
        - name: JWT_SECRET
          value: "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0"
        command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8002"]

---
# reservation-service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reservation-service
  labels:
    app: reservation-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: reservation-service
  template:
    metadata:
      labels:
        app: reservation-service
    spec:
      containers:
      - name: reservation-service
        image: nayer564/meeting-room-reservation-reservation-service:latest
        ports:
        - containerPort: 8003
        env:
        - name: DATABASE_URL
          value: "postgresql://meeting_user:12345@postgres:5432/meeting_room_db"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka:9092"
        - name: JWT_SECRET
          value: "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0"
        command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8003"]

---
# api-gateway Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  labels:
    app: api-gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: api-gateway
        image: nayer564/meeting-room-reservation-api-gateway:latest
        ports:
        - containerPort: 8080
        env:
        - name: USER_SERVICE_URL
          value: "http://user-service:8001"
        - name: SALLE_SERVICE_URL
          value: "http://salle-service:8002"
        - name: RESERVATION_SERVICE_URL
          value: "http://reservation-service:8003"
        - name: JWT_SECRET
          value: "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0"
        - name: HEALTH_CHECK_TIMEOUT
          value: "5"
        - name: CORS_ALLOWED_ORIGINS
          value: "http://localhost:3000"

---
# frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: nayer564/meeting-room-reservation-frontend:latest
        ports:
        - containerPort: 80